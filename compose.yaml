services: 

  client:
    build: ./client
    ports: 
      - 5173:5173
    
  product-service:
    build: 
      context: ./server
      dockerfile: ./ProductService/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports: 
      - 8080:8080
    environment: 
      - ASPNETCORE_URLS=http://+:8080
      
  email-service:
    build: 
      context: ./server
      dockerfile: ./EmailService/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports: 
      - 8086:8086
    environment: 
      - ASPNETCORE_URLS=http://+:8086

  auth-service:
    build: 
      context: ./server
      dockerfile: ./AuthService/Dockerfile
    ports: 
      - 8082:8082
    environment: 
      - ASPNETCORE_URLS=http://+:8082

  # generally, you don't need to define your context/dockerfile separate from your build.
  # It will usually look like this. I have it definied separately above so I can reference my contracts across
  # multiple solutions/services, but generally you would set them up in a nuget package and not separate your
  # dockerfile from your context
  # auth-service:
  #   build: ./server/AuthService
  #   ports: 
  #     - 8082:8082
  #   environment: 
  #     - ASPNETCORE_URLS=http://+:8082


  # Third Party Services
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      # AMQP protocol port
      - "5672:5672"
      # Management UI port
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=rabbitmq
      - RABBITMQ_DEFAULT_PASS=rabbitmq
    volumes:
      # Persist data
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

  db:
    image: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports: 
      - 5432:5432
    volumes:
      - database:/var/lib/postgresql/data
     
volumes:
  database:
  rabbitmq_data:
